{"version":3,"sources":["Spinner.js","App.js","index.js"],"names":["Spinner","className","width","height","viewBox","xmlns","fill","strokeWidth","strokeLinecap","cx","cy","r","App","useState","selectedFile","setSelectedFile","fileName","setFileName","preview","setPreview","isDisabled","setIsDisabled","isLoading","setIsLoading","isError","setIsError","isSuccess","setIsSuccess","buttonText","setButtonText","setfileNameN","fileLocation","setfileLocation","useEffect","handleFileUpload","e","a","preventDefault","fileData","FormData","i","length","append","Date","now","name","console","log","axios","method","url","data","headers","res","setTimeout","onSubmit","src","alt","type","multiple","onChange","target","files","disabled","tabIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAsBeA,EApBC,kBACd,yBACEC,UAAU,UACVC,MAAM,OACNC,OAAO,OACPC,QAAQ,YACRC,MAAM,8BAEN,4BACEJ,UAAU,OACVK,KAAK,OACLC,YAAY,IACZC,cAAc,QACdC,GAAG,KACHC,GAAG,KACHC,EAAE,SCiJOC,EA9JH,WAAO,IAAD,EACwBC,mBAAS,MADjC,mBACTC,EADS,KACKC,EADL,OAEgBF,mBAAS,MAFzB,mBAETG,EAFS,KAECC,EAFD,OAGcJ,mBAAS,MAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIoBN,oBAAS,GAJ7B,mBAITO,EAJS,KAIGC,EAJH,OAKkBR,oBAAS,GAL3B,mBAKTS,EALS,KAKEC,EALF,OAMcV,oBAAS,GANvB,mBAMTW,EANS,KAMAC,EANA,OAOkBZ,oBAAS,GAP3B,mBAOTa,EAPS,KAOEC,EAPF,OAQoBd,mBAAS,0BAR7B,mBAQTe,EARS,KAQGC,EARH,OASkBhB,mBAAS,IAT3B,mBASEiB,GATF,aAUwBjB,mBAAS,IAVjC,mBAUTkB,EAVS,KAUKC,EAVL,KA0BhBC,qBAAU,cAOP,CAACnB,IAGJ,IAAMoB,EAAgB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACvBD,EAAEE,iBACFd,GAAa,GACbF,GAAc,GACdQ,EAAc,qCAJS,SAOA,KAAjBf,EAPiB,iBAenB,IALIwB,EAAW,IAAIC,SAKVC,EAAI,EAAGA,EAAI1B,EAAa2B,OAAQD,IAEvCF,EAASI,OAAO,QAAS5B,EAAa0B,GAAtC,UAA4CG,KAAKC,OAAjD,OAAyD9B,EAAa0B,GAAGK,OAjBxD,OAmBnBC,QAAQC,IAAI,SAAST,GAnBF,UA2BJU,IAAM,CACnBC,OAAQ,OACRC,IAAK,mCACLC,KAAMb,EACNc,QAAS,CAAE,eAAgB,yBA/BV,QA2BfC,EA3Be,OAiCnBP,QAAQC,IAAI,sBAAmBM,EAAIF,KAAKpB,cACxCD,EAAauB,EAAIF,KAAKnC,UACtBgB,EAAgBqB,EAAIF,KAAKpB,cAEzBR,GAAa,GACbI,GAAa,GAGb2B,YAAW,WACTvC,EAAgB,MAChBI,EAAW,MACXQ,GAAa,GACbV,EAAY,MACZY,EAAc,4BACb,KA/CgB,0DAkDrBN,GAAa,GACbE,GAAW,GACXR,EAAY,MAEZqC,YAAW,WACT7B,GAAW,GACXI,EAAc,4BACb,KAzDkB,0DAAH,sDA6DtB,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,SAChB,wEAEF,8BACE,0BAAMsD,SAAU,SAACpB,GAAD,OAAOD,EAAiBC,KACtC,2BAAOlC,UAAU,YACf,yBAAKA,UAAU,gBACZqB,EACC,kBAAC,EAAD,MAEA,oCACGE,GAAWE,EACV,uBACEzB,UAAS,eAAUyB,EAAY,UAAY,WAG7C,oCACGR,EACC,yBAAKjB,UAAU,WACb,yBACEuD,IAAKtC,EACLuC,IAAI,wCAIR,uBAAGxD,UAAU,gBAEf,2BAAOyD,KAAK,OAAQC,SAAS,WAAWC,SAjHrC,SAACzB,GAClBA,EAAE0B,OAAOC,QACX/C,EAAgBoB,EAAE0B,OAAOC,OAIzBzC,GAAc,GACdQ,EAAc,6BAgHPL,GAAWE,EACV,uBAAGzB,UAAWyB,EAAY,UAAY,SACnCA,EAAY,qBAAuB,4BAGtC,uBAAGzB,UAAU,YACVe,GAAsB,yBAK7B,4BACE0C,KAAK,SACLzD,UAAU,MACV8D,SAAU3C,EACV4C,SAAU,GAETpC,KAING,ICxJPkC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3a2e5cec.chunk.js","sourcesContent":["import React from 'react';\n\nconst Spinner = () => (\n  <svg\n    className='spinner'\n    width='65px'\n    height='65px'\n    viewBox='0 0 66 66'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <circle\n      className='path'\n      fill='none'\n      strokeWidth='6'\n      strokeLinecap='round'\n      cx='33'\n      cy='33'\n      r='30'\n    ></circle>\n  </svg>\n);\n\nexport default Spinner;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Spinner from './Spinner';\n\nconst App = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [buttonText, setButtonText] = useState('Select your file first');\n  const [fileNameN, setfileNameN] = useState('');\n  const [fileLocation, setfileLocation] = useState('');\n\n  // Handling file selection from input\n  const onFileSelected = (e) => {\n    if (e.target.files) {\n      setSelectedFile(e.target.files);\n      // console.log(e.target.files)\n      // setSelectedFile(e.target.files[0]);\n      // setFileName(e.target.files[0].name);\n      setIsDisabled(false); // Enabling upload button\n      setButtonText(\"Let's upload this!\");\n      \n    }\n  };\n\n  // Setting image preview\n  useEffect(() => {\n    if (selectedFile) {\n      // const reader = new FileReader();\n      // reader.onloadend = () => setPreview(reader.result);\n\n      // reader.readAsDataURL(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Uploading image to Cloud Storage\n  const handleFileUpload = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setIsDisabled(true);\n    setButtonText(\"Wait we're uploading your file...\");\n\n    try {\n      if (selectedFile !== '') {\n        \n        // Creating a FormData object\n        let fileData = new FormData();\n\n        // Adding the 'image' field and the selected file as value to our FormData object\n        // Changing file name to make it unique and avoid potential later overrides\n        \n        for (let i = 0; i < selectedFile.length; i++) {\n          \n          fileData.append('image', selectedFile[i],`${Date.now()}${selectedFile[i].name}`)\n        }\n        console.log('fileDa',fileData)\n\n        // fileData.set(\n        //   'image',\n        //   selectedFile,\n        //   `${Date.now()}-${selectedFile.name}`\n        // );\n        \n        let res =await axios({\n          method: 'post',\n          url: 'http://localhost:8080/api/upload',\n          data: fileData,\n          headers: { 'Content-Type': 'multipart/form-data' },\n        });\n        console.log('RESPONSE------->',res.data.fileLocation)\n        setfileNameN(res.data.fileName)\n        setfileLocation(res.data.fileLocation)\n\n        setIsLoading(false);\n        setIsSuccess(true);\n\n        // Reset to default values after 3 seconds\n        setTimeout(() => {\n          setSelectedFile(null);\n          setPreview(null);\n          setIsSuccess(false);\n          setFileName(null);\n          setButtonText('Select your file first');\n        }, 3000);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n      setFileName(null);\n\n      setTimeout(() => {\n        setIsError(false);\n        setButtonText('Select your file first');\n      }, 3000);\n    }\n  };\n\n  return (\n    <div className='app'>\n      <header className='title'>\n        <h1>Upload a file to Firebase Cloud Storage</h1>\n      </header>\n      <main>\n        <form onSubmit={(e) => handleFileUpload(e)}>\n          <label className='uploader'>\n            <div className='upload-space'>\n              {isLoading ? (\n                <Spinner />\n              ) : (\n                <>\n                  {isError || isSuccess ? (\n                    <i\n                      className={`icon-${isSuccess ? 'success' : 'error'}`}\n                    ></i>\n                  ) : (\n                    <>\n                      {preview ? (\n                        <div className='preview'>\n                          <img\n                            src={preview}\n                            alt='Preview of the file to be uploaded'\n                          />\n                        </div>\n                      ) : (\n                        <i className='icon-upload'></i>\n                      )}\n                      <input type='file'  multiple=\"multiple\" onChange={onFileSelected} />\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n            {isError || isSuccess ? (\n              <p className={isSuccess ? 'success' : 'error'}>\n                {isSuccess ? 'Upload successful!' : 'Something went wrong ...'}\n              </p>\n            ) : (\n              <p className='filename'>\n                {fileName ? fileName : 'No file selected yet'}\n              </p>\n            )}\n          </label>\n\n          <button\n            type='submit'\n            className='btn'\n            disabled={isDisabled}\n            tabIndex={0}\n          >\n            {buttonText}\n          </button>\n        </form>\n      </main>\n      {fileLocation}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}