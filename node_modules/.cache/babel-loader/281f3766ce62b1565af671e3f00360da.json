{"ast":null,"code":"var _jsxFileName = \"/media/laura/dados/Projects/Work/GCS/firebase-react/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Spinner from './Spinner';\n\nconst App = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [buttonText, setButtonText] = useState('Select your file first');\n  const [fileNameN, setfileNameN] = useState('');\n  const [fileLocation, setfileLocation] = useState(''); // Handling file selection from input\n\n  const onFileSelected = e => {\n    if (e.target.files) {\n      setSelectedFile(e.target.files); // console.log(e.target.files)\n      // setSelectedFile(e.target.files[0]);\n      // setFileName(e.target.files[0].name);\n\n      setIsDisabled(false); // Enabling upload button\n\n      setButtonText(\"Let's upload this!\");\n    }\n  }; // Setting image preview\n\n\n  useEffect(() => {\n    if (selectedFile) {// const reader = new FileReader();\n      // reader.onloadend = () => setPreview(reader.result);\n      // reader.readAsDataURL(selectedFile);\n    }\n  }, [selectedFile]); // Uploading image to Cloud Storage\n\n  const handleFileUpload = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    setIsDisabled(true);\n    setButtonText(\"Wait we're uploading your file...\");\n\n    try {\n      if (selectedFile !== '') {\n        // Creating a FormData object\n        let fileData = new FormData(); // Adding the 'image' field and the selected file as value to our FormData object\n        // Changing file name to make it unique and avoid potential later overrides\n\n        for (let i = 0; i < selectedFile.length; i++) {\n          fileData.append('image', selectedFile[i], `${Date.now()}-${selectedFile[i].name}`);\n        }\n\n        console.log('fileDa', fileData); // fileData.set(\n        //   'image',\n        //   selectedFile,\n        //   `${Date.now()}-${selectedFile.name}`\n        // );\n\n        let res = await axios({\n          method: 'post',\n          url: 'http://localhost:8080/api/upload',\n          data: fileData,\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log('RESPONSE------->', res.data.fileLocation);\n        setfileNameN(res.data.fileName);\n        setfileLocation(res.data.fileLocation);\n        setIsLoading(false);\n        setIsSuccess(true); // Reset to default values after 3 seconds\n\n        setTimeout(() => {\n          setSelectedFile(null);\n          setPreview(null);\n          setIsSuccess(false);\n          setFileName(null);\n          setButtonText('Select your file first');\n        }, 3000);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n      setFileName(null);\n      setTimeout(() => {\n        setIsError(false);\n        setButtonText('Select your file first');\n      }, 3000);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Upload a file to Firebase Cloud Storage\")), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleFileUpload(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"uploader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload-space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, isError || isSuccess ? /*#__PURE__*/React.createElement(\"i\", {\n    className: `icon-${isSuccess ? 'success' : 'error'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, preview ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: preview,\n    alt: \"Preview of the file to be uploaded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 27\n    }\n  })) : /*#__PURE__*/React.createElement(\"i\", {\n    className: \"icon-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    multiple: \"multiple\",\n    onChange: onFileSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }\n  })))), isError || isSuccess ? /*#__PURE__*/React.createElement(\"p\", {\n    className: isSuccess ? 'success' : 'error',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, isSuccess ? 'Upload successful!' : 'Something went wrong ...') : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"filename\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, fileName ? fileName : 'No file selected yet')), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    disabled: isDisabled,\n    tabIndex: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, buttonText))));\n};\n\nexport default App;","map":{"version":3,"sources":["/media/laura/dados/Projects/Work/GCS/firebase-react/src/App.js"],"names":["React","useState","useEffect","axios","Spinner","App","selectedFile","setSelectedFile","fileName","setFileName","preview","setPreview","isDisabled","setIsDisabled","isLoading","setIsLoading","isError","setIsError","isSuccess","setIsSuccess","buttonText","setButtonText","fileNameN","setfileNameN","fileLocation","setfileLocation","onFileSelected","e","target","files","handleFileUpload","preventDefault","fileData","FormData","i","length","append","Date","now","name","console","log","res","method","url","data","headers","setTimeout","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Spinner from './Spinner';\n\nconst App = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [buttonText, setButtonText] = useState('Select your file first');\n  const [fileNameN, setfileNameN] = useState('');\n  const [fileLocation, setfileLocation] = useState('');\n\n  // Handling file selection from input\n  const onFileSelected = (e) => {\n    if (e.target.files) {\n      setSelectedFile(e.target.files);\n      // console.log(e.target.files)\n      // setSelectedFile(e.target.files[0]);\n      // setFileName(e.target.files[0].name);\n      setIsDisabled(false); // Enabling upload button\n      setButtonText(\"Let's upload this!\");\n      \n    }\n  };\n\n  // Setting image preview\n  useEffect(() => {\n    if (selectedFile) {\n      // const reader = new FileReader();\n      // reader.onloadend = () => setPreview(reader.result);\n\n      // reader.readAsDataURL(selectedFile);\n    }\n  }, [selectedFile]);\n\n  // Uploading image to Cloud Storage\n  const handleFileUpload = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setIsDisabled(true);\n    setButtonText(\"Wait we're uploading your file...\");\n\n    try {\n      if (selectedFile !== '') {\n        \n        // Creating a FormData object\n        let fileData = new FormData();\n\n        // Adding the 'image' field and the selected file as value to our FormData object\n        // Changing file name to make it unique and avoid potential later overrides\n        \n        for (let i = 0; i < selectedFile.length; i++) {\n          \n          fileData.append('image', selectedFile[i],`${Date.now()}-${selectedFile[i].name}`)\n        }\n        console.log('fileDa',fileData)\n\n        // fileData.set(\n        //   'image',\n        //   selectedFile,\n        //   `${Date.now()}-${selectedFile.name}`\n        // );\n        \n        let res =await axios({\n          method: 'post',\n          url: 'http://localhost:8080/api/upload',\n          data: fileData,\n          headers: { 'Content-Type': 'multipart/form-data' },\n        });\n        console.log('RESPONSE------->',res.data.fileLocation)\n        setfileNameN(res.data.fileName)\n        setfileLocation(res.data.fileLocation)\n\n        setIsLoading(false);\n        setIsSuccess(true);\n\n        // Reset to default values after 3 seconds\n        setTimeout(() => {\n          setSelectedFile(null);\n          setPreview(null);\n          setIsSuccess(false);\n          setFileName(null);\n          setButtonText('Select your file first');\n        }, 3000);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n      setFileName(null);\n\n      setTimeout(() => {\n        setIsError(false);\n        setButtonText('Select your file first');\n      }, 3000);\n    }\n  };\n\n  return (\n    <div className='app'>\n      <header className='title'>\n        <h1>Upload a file to Firebase Cloud Storage</h1>\n      </header>\n      <main>\n        <form onSubmit={(e) => handleFileUpload(e)}>\n          <label className='uploader'>\n            <div className='upload-space'>\n              {isLoading ? (\n                <Spinner />\n              ) : (\n                <>\n                  {isError || isSuccess ? (\n                    <i\n                      className={`icon-${isSuccess ? 'success' : 'error'}`}\n                    ></i>\n                  ) : (\n                    <>\n                      {preview ? (\n                        <div className='preview'>\n                          <img\n                            src={preview}\n                            alt='Preview of the file to be uploaded'\n                          />\n                        </div>\n                      ) : (\n                        <i className='icon-upload'></i>\n                      )}\n                      <input type='file'  multiple=\"multiple\" onChange={onFileSelected} />\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n            {isError || isSuccess ? (\n              <p className={isSuccess ? 'success' : 'error'}>\n                {isSuccess ? 'Upload successful!' : 'Something went wrong ...'}\n              </p>\n            ) : (\n              <p className='filename'>\n                {fileName ? fileName : 'No file selected yet'}\n              </p>\n            )}\n          </label>\n\n          <button\n            type='submit'\n            className='btn'\n            disabled={isDisabled}\n            tabIndex={0}\n          >\n            {buttonText}\n          </button>\n        </form>\n      </main>\n\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}